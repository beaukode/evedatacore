// This file is auto-generated by @hey-api/openapi-ts

export type GetFindNearIdDistanceData = {
  path: {
    /**
     * GET /find/near/:id/:distance Parameter
     */
    distance: number;
    /**
     * GET /find/near/:id/:distance Parameter
     */
    id: number;
  };
};

export type GetFindNearIdDistanceResponse = {
  items: Array<{
    solarSystemId: number;
    distance: number;
  }>;
};

export type GetFindNearIdDistanceError = {
  message: string;
};

export type PostEventsData = {
  /**
   * POST /events Request body
   */
  body: {
    events: {
      [key: string]: number;
    };
  };
};

export type PostEventsResponse = {
  [key: string]: unknown;
};

export type PostEventsError = {
  message: string;
};

export type GetCharactersData = {
  query?: {
    /**
     * GET /characters Parameter
     */
    startKey?: string;
  };
};

export type GetCharactersResponse = {
  items: Array<{
    id: string;
    account?: string;
    createdAt?: number;
    exists?: boolean;
    name?: string;
    tribeId?: number;
    balance?: string;
  }>;
  nextKey?: string;
};

export type GetCharactersError = {
  message: string;
};

export type GetCharacterIdTablesData = {
  path: {
    /**
     * GET /character/:id/tables Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/tables Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdTablesResponse = {
  items: Array<{
    world: string;
    tableId: string;
    account: string;
    namespaceId: string;
    ownerId?: string;
    ownerName?: string;
    schemaOrder: Array<string>;
    label: string;
    key: Array<string>;
    name: string;
    namespace: string;
    type: string;
    schema: {
      [key: string]: {
        type: string;
        internalType: string;
      };
    };
  }>;
  nextKey?: string;
};

export type GetCharacterIdTablesError = {
  message: string;
};

export type GetCharacterIdNamespacesData = {
  path: {
    /**
     * GET /character/:id/namespaces Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/namespaces Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdNamespacesResponse = {
  items: Array<{
    id: string;
    account: string;
    createdAt: number;
    name: string;
    ownerId?: string;
    ownerName?: string;
  }>;
  nextKey?: string;
};

export type GetCharacterIdNamespacesError = {
  message: string;
};

export type GetCharacterIdAssembliesData = {
  path: {
    /**
     * GET /character/:id/assemblies Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/assemblies Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdAssembliesResponse = {
  items: Array<{
    id: string;
    currentState?: number;
    previousState?: number;
    assemblyType?: string;
    isValid?: boolean;
    anchoredAt?: number;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    solarSystemId?: number;
    x?: string;
    y?: string;
    z?: string;
    inventories?: {
      [key: string]: {
        capacity: string;
        usedCapacity: string;
        ownerId?: string;
        ownerName?: string;
        items: {
          [key: string]: number;
        };
      };
    };
    name?: string;
    dappUrl?: string;
    description?: string;
    networkNodeId?: string;
    maxEnergyCapacity?: number;
    energyProduced?: number;
    totalReservedEnergy?: number;
    systemId?: string;
    maxDistance?: string;
    linkedGateId?: string | null;
  }>;
  nextKey?: string;
};

export type GetCharacterIdAssembliesError = {
  message: string;
};

export type GetCharacterIdKillsData = {
  path: {
    /**
     * GET /character/:id/kills Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/kills Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdKillsResponse = {
  items: Array<{
    id: string;
    killerId?: string;
    killerAccount?: string;
    killerName?: string;
    victimId?: string;
    victimAccount?: string;
    victimName?: string;
    lossType?: number;
    solarSystemId?: number;
    killedAt?: number;
  }>;
  nextKey?: string;
};

export type GetCharacterIdKillsError = {
  message: string;
};

export type GetCharacterIdSystemsData = {
  path: {
    /**
     * GET /character/:id/systems Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/systems Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdSystemsResponse = {
  items: Array<{
    id: string;
    name: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    contract: string;
    publicAccess: boolean;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetCharacterIdSystemsError = {
  message: string;
};

export type GetCharacterIdFunctionsData = {
  path: {
    /**
     * GET /character/:id/functions Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /character/:id/functions Parameter
     */
    startKey?: string;
  };
};

export type GetCharacterIdFunctionsResponse = {
  items: Array<{
    id: string;
    signature: string;
    systemId?: string;
    systemName?: string;
    systemSelector?: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetCharacterIdFunctionsError = {
  message: string;
};

export type GetCharacterIdData = {
  path: {
    /**
     * GET /character/:id Parameter
     */
    id: string;
  };
};

export type GetCharacterIdResponse = {
  id: string;
  account?: string;
  createdAt?: number;
  exists?: boolean;
  name?: string;
  tribeId?: number;
  balance?: string;
};

export type GetCharacterIdError = {
  message: string;
};

export type GetKillsData = {
  query?: {
    /**
     * GET /kills Parameter
     */
    startKey?: string;
  };
};

export type GetKillsResponse = {
  items: Array<{
    id: string;
    killerId?: string;
    killerAccount?: string;
    killerName?: string;
    victimId?: string;
    victimAccount?: string;
    victimName?: string;
    lossType?: number;
    solarSystemId?: number;
    killedAt?: number;
  }>;
  nextKey?: string;
};

export type GetKillsError = {
  message: string;
};

export type GetTribeIdCharactersData = {
  path: {
    /**
     * GET /tribe/:id/characters Parameter
     */
    id: number | null;
  };
  query?: {
    /**
     * GET /tribe/:id/characters Parameter
     */
    startKey?: string;
  };
};

export type GetTribeIdCharactersResponse = {
  items: Array<{
    id: string;
    account?: string;
    createdAt?: number;
    exists?: boolean;
    name?: string;
    tribeId?: number;
    balance?: string;
  }>;
  nextKey?: string;
};

export type GetTribeIdCharactersError = {
  message: string;
};

export type GetAssembliesData = {
  query?: {
    /**
     * GET /assemblies Parameter
     */
    startKey?: string;
  };
};

export type GetAssembliesResponse = {
  items: Array<{
    id: string;
    currentState?: number;
    previousState?: number;
    assemblyType?: string;
    isValid?: boolean;
    anchoredAt?: number;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    solarSystemId?: number;
    x?: string;
    y?: string;
    z?: string;
    inventories?: {
      [key: string]: {
        capacity: string;
        usedCapacity: string;
        ownerId?: string;
        ownerName?: string;
        items: {
          [key: string]: number;
        };
      };
    };
    name?: string;
    dappUrl?: string;
    description?: string;
    networkNodeId?: string;
    maxEnergyCapacity?: number;
    energyProduced?: number;
    totalReservedEnergy?: number;
    systemId?: string;
    maxDistance?: string;
    linkedGateId?: string | null;
  }>;
  nextKey?: string;
};

export type GetAssembliesError = {
  message: string;
};

export type GetAssemblyIdNetworkData = {
  path: {
    /**
     * GET /assembly/:id/network Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /assembly/:id/network Parameter
     */
    startKey?: string;
  };
};

export type GetAssemblyIdNetworkResponse = {
  items: Array<{
    id: string;
    currentState?: number;
    previousState?: number;
    assemblyType?: string;
    isValid?: boolean;
    anchoredAt?: number;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    solarSystemId?: number;
    x?: string;
    y?: string;
    z?: string;
    inventories?: {
      [key: string]: {
        capacity: string;
        usedCapacity: string;
        ownerId?: string;
        ownerName?: string;
        items: {
          [key: string]: number;
        };
      };
    };
    name?: string;
    dappUrl?: string;
    description?: string;
    networkNodeId?: string;
    maxEnergyCapacity?: number;
    energyProduced?: number;
    totalReservedEnergy?: number;
    systemId?: string;
    maxDistance?: string;
    linkedGateId?: string | null;
  }>;
  maxEnergyCapacity?: number;
  energyProduced?: number;
  totalReservedEnergy?: number;
  nextKey?: string;
};

export type GetAssemblyIdNetworkError = {
  message: string;
};

export type GetAssemblyIdInventoriesData = {
  path: {
    /**
     * GET /assembly/:id/inventories Parameter
     */
    id: string;
  };
};

export type GetAssemblyIdInventoriesResponse = {
  inventories?: {
    [key: string]: {
      capacity: string;
      usedCapacity: string;
      ownerId?: string;
      ownerName?: string;
      items: {
        [key: string]: number;
      };
    };
  };
};

export type GetAssemblyIdInventoriesError = {
  message: string;
};

export type GetAssemblyIdData = {
  path: {
    /**
     * GET /assembly/:id Parameter
     */
    id: string;
  };
};

export type GetAssemblyIdResponse = {
  id: string;
  currentState?: number;
  previousState?: number;
  assemblyType?: string;
  isValid?: boolean;
  anchoredAt?: number;
  account?: string;
  ownerId?: string;
  ownerName?: string;
  solarSystemId?: number;
  x?: string;
  y?: string;
  z?: string;
  inventories?: {
    [key: string]: {
      capacity: string;
      usedCapacity: string;
      ownerId?: string;
      ownerName?: string;
      items: {
        [key: string]: number;
      };
    };
  };
  name?: string;
  dappUrl?: string;
  description?: string;
  networkNodeId?: string;
  maxEnergyCapacity?: number;
  energyProduced?: number;
  totalReservedEnergy?: number;
  systemId?: string;
  maxDistance?: string;
  linkedGateId?: string | null;
};

export type GetAssemblyIdError = {
  message: string;
};

export type GetNamespacesData = {
  query?: {
    /**
     * GET /namespaces Parameter
     */
    startKey?: string;
  };
};

export type GetNamespacesResponse = {
  items: Array<{
    id: string;
    account: string;
    createdAt: number;
    name: string;
    ownerId?: string;
    ownerName?: string;
  }>;
  nextKey?: string;
};

export type GetNamespacesError = {
  message: string;
};

export type GetNamespaceIdTablesData = {
  path: {
    /**
     * GET /namespace/:id/tables Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /namespace/:id/tables Parameter
     */
    startKey?: string;
  };
};

export type GetNamespaceIdTablesResponse = {
  items: Array<{
    world: string;
    tableId: string;
    account: string;
    namespaceId: string;
    ownerId?: string;
    ownerName?: string;
    schemaOrder: Array<string>;
    label: string;
    key: Array<string>;
    name: string;
    namespace: string;
    type: string;
    schema: {
      [key: string]: {
        type: string;
        internalType: string;
      };
    };
  }>;
  nextKey?: string;
};

export type GetNamespaceIdTablesError = {
  message: string;
};

export type GetNamespaceIdSystemsData = {
  path: {
    /**
     * GET /namespace/:id/systems Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /namespace/:id/systems Parameter
     */
    startKey?: string;
  };
};

export type GetNamespaceIdSystemsResponse = {
  items: Array<{
    id: string;
    name: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    contract: string;
    publicAccess: boolean;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetNamespaceIdSystemsError = {
  message: string;
};

export type GetNamespaceIdFunctionsData = {
  path: {
    /**
     * GET /namespace/:id/functions Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /namespace/:id/functions Parameter
     */
    startKey?: string;
  };
};

export type GetNamespaceIdFunctionsResponse = {
  items: Array<{
    id: string;
    signature: string;
    systemId?: string;
    systemName?: string;
    systemSelector?: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetNamespaceIdFunctionsError = {
  message: string;
};

export type GetNamespaceIdData = {
  path: {
    /**
     * GET /namespace/:id Parameter
     */
    id: string;
  };
};

export type GetNamespaceIdResponse = {
  id: string;
  account: string;
  createdAt: number;
  name: string;
  ownerId?: string;
  ownerName?: string;
};

export type GetNamespaceIdError = {
  message: string;
};

export type GetSystemsData = {
  query?: {
    /**
     * GET /systems Parameter
     */
    startKey?: string;
  };
};

export type GetSystemsResponse = {
  items: Array<{
    id: string;
    name: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    contract: string;
    publicAccess: boolean;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetSystemsError = {
  message: string;
};

export type GetSystemIdData = {
  path: {
    /**
     * GET /system/:id Parameter
     */
    id: string;
  };
};

export type GetSystemIdResponse = {
  id: string;
  name: string;
  account?: string;
  ownerId?: string;
  ownerName?: string;
  namespace?: string;
  namespaceId?: string;
  contract: string;
  publicAccess: boolean;
  createdAt: number;
};

export type GetSystemIdError = {
  message: string;
};

export type GetFunctionsData = {
  query?: {
    /**
     * GET /functions Parameter
     */
    startKey?: string;
  };
};

export type GetFunctionsResponse = {
  items: Array<{
    id: string;
    signature: string;
    systemId?: string;
    systemName?: string;
    systemSelector?: string;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    namespace?: string;
    namespaceId?: string;
    createdAt: number;
  }>;
  nextKey?: string;
};

export type GetFunctionsError = {
  message: string;
};

export type GetFunctionIdData = {
  path: {
    /**
     * GET /function/:id Parameter
     */
    id: string;
  };
};

export type GetFunctionIdResponse = {
  id: string;
  signature: string;
  systemId?: string;
  systemName?: string;
  systemSelector?: string;
  account?: string;
  ownerId?: string;
  ownerName?: string;
  namespace?: string;
  namespaceId?: string;
  createdAt: number;
};

export type GetFunctionIdError = {
  message: string;
};

export type GetTablesData = {
  query?: {
    /**
     * GET /tables Parameter
     */
    startKey?: string;
  };
};

export type GetTablesResponse = {
  items: Array<{
    world: string;
    tableId: string;
    account: string;
    namespaceId: string;
    ownerId?: string;
    ownerName?: string;
    schemaOrder: Array<string>;
    label: string;
    key: Array<string>;
    name: string;
    namespace: string;
    type: string;
    schema: {
      [key: string]: {
        type: string;
        internalType: string;
      };
    };
  }>;
  nextKey?: string;
};

export type GetTablesError = {
  message: string;
};

export type GetTableIdRecordsData = {
  path: {
    /**
     * GET /table/:id/records Parameter
     */
    id: string;
  };
  query?: {
    /**
     * GET /table/:id/records Parameter
     */
    startKey?: string;
  };
};

export type GetTableIdRecordsResponse = {
  items: Array<{
    [key: string]: unknown;
  }>;
  nextKey?: string;
};

export type GetTableIdRecordsError = {
  message: string;
};

export type GetTableIdData = {
  path: {
    /**
     * GET /table/:id Parameter
     */
    id: string;
  };
};

export type GetTableIdResponse = {
  world: string;
  tableId: string;
  account: string;
  namespaceId: string;
  ownerId?: string;
  ownerName?: string;
  schemaOrder: Array<string>;
  label: string;
  key: Array<string>;
  name: string;
  namespace: string;
  type: string;
  schema: {
    [key: string]: {
      type: string;
      internalType: string;
    };
  };
};

export type GetTableIdError = {
  message: string;
};

export type GetSolarsystemIdAssembliesData = {
  path: {
    /**
     * GET /solarsystem/:id/assemblies Parameter
     */
    id: number | null;
  };
  query?: {
    /**
     * GET /solarsystem/:id/assemblies Parameter
     */
    startKey?: string;
  };
};

export type GetSolarsystemIdAssembliesResponse = {
  items: Array<{
    id: string;
    currentState?: number;
    previousState?: number;
    assemblyType?: string;
    isValid?: boolean;
    anchoredAt?: number;
    account?: string;
    ownerId?: string;
    ownerName?: string;
    solarSystemId?: number;
    x?: string;
    y?: string;
    z?: string;
    inventories?: {
      [key: string]: {
        capacity: string;
        usedCapacity: string;
        ownerId?: string;
        ownerName?: string;
        items: {
          [key: string]: number;
        };
      };
    };
    name?: string;
    dappUrl?: string;
    description?: string;
    networkNodeId?: string;
    maxEnergyCapacity?: number;
    energyProduced?: number;
    totalReservedEnergy?: number;
    systemId?: string;
    maxDistance?: string;
    linkedGateId?: string | null;
  }>;
  nextKey?: string;
};

export type GetSolarsystemIdAssembliesError = {
  message: string;
};

export type GetSolarsystemIdKillsData = {
  path: {
    /**
     * GET /solarsystem/:id/kills Parameter
     */
    id: number | null;
  };
  query?: {
    /**
     * GET /solarsystem/:id/kills Parameter
     */
    startKey?: string;
  };
};

export type GetSolarsystemIdKillsResponse = {
  items: Array<{
    id: string;
    killerId?: string;
    killerAccount?: string;
    killerName?: string;
    victimId?: string;
    victimAccount?: string;
    victimName?: string;
    lossType?: number;
    solarSystemId?: number;
    killedAt?: number;
  }>;
  nextKey?: string;
};

export type GetSolarsystemIdKillsError = {
  message: string;
};
