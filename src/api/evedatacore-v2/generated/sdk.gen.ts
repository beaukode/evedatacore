// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-fetch";
import type {
  GetFindNearIdDistanceData,
  GetFindNearIdDistanceError,
  GetFindNearIdDistanceResponse,
  PostEventsData,
  PostEventsError,
  PostEventsResponse,
  GetCharactersData,
  GetCharactersError,
  GetCharactersResponse,
  GetAssembliesData,
  GetAssembliesError,
  GetAssembliesResponse,
  GetNamespacesData,
  GetNamespacesError,
  GetNamespacesResponse,
  GetTablesData,
  GetTablesError,
  GetTablesResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export const getFindNearIdDistance = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetFindNearIdDistanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFindNearIdDistanceResponse,
    GetFindNearIdDistanceError,
    ThrowOnError
  >({
    ...options,
    url: "/find/near/{id}/{distance}",
  });
};

export const postEvents = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostEventsResponse,
    PostEventsError,
    ThrowOnError
  >({
    ...options,
    url: "/events",
  });
};

export const getCharacters = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetCharactersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCharactersResponse,
    GetCharactersError,
    ThrowOnError
  >({
    ...options,
    url: "/characters",
  });
};

export const getAssemblies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAssembliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssembliesResponse,
    GetAssembliesError,
    ThrowOnError
  >({
    ...options,
    url: "/assemblies",
  });
};

export const getNamespaces = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNamespacesResponse,
    GetNamespacesError,
    ThrowOnError
  >({
    ...options,
    url: "/namespaces",
  });
};

export const getTables = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetTablesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetTablesResponse,
    GetTablesError,
    ThrowOnError
  >({
    ...options,
    url: "/tables",
  });
};
